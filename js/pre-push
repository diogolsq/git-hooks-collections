#!/bin/sh
if [ "$SKIP_HOOKS" == "true" ] || git config --get hooks.skipchecks | grep -q 'true'; then
    echo "Bypassing checks."
    exit 0
fi

# checking for dependecies
if ! command -v eslint &> /dev/null; then
    echo "eslint not found! Installing..."
    npm install -g eslint
    npm init @eslint/config
fi

if ! command -v tslint &> /dev/null; then
    echo "tslint not found! Installing..."
    npm install -g tslint
    echo "Setting up default configuration..."
    echo '{
        "extends": "tslint:recommended",
        "rules": {
        // Add or modify rules here
        }
    }' > tslint.json

fi


# Check if complexity-report is installed
if ! command -v cr &> /dev/null; then
    echo "complexity-report not found! Installing..."
    npm install -g complexity-report

fi


if ! command -v stylelint &> /dev/null; then
    echo "stylelint not found! Installing..."
    npm install -g stylelint stylelint-config-recommended  postcss-scss
    cho "Setting up default configuration..."
    echo '{
        "extends": ["stylelint-config-recommended", "stylelint-config-scss"],
        "rules": {
            // Add or modify rules here
        }
    }' > .stylelintrc.json
fi

echo "Running pre-push check..."

# Get the list of changed files
files=$(git diff master --name-only --diff-filter=d)

echo "linting... $files"
for file in $files; do
    if [[ "$file" =~ \.js$ ]]; then
        echo "Running ESLint for $file"
        eslint --fix "$file"

        eslint_result=$(eslint "$file")
        eslint_exit_code=$?
        if [ $eslint_exit_code -ne 0 ]; then
            echo "ESLint failed for $file:"
            echo "$eslint_result"
            exit 1
        fi
    elif [[ "$file" =~ \.ts$ ]]; then
        echo "Running TSLint for $file"
        tslint --fix "$file"

        tslint_result=$(tslint "$file")
        tslint_exit_code=$?
        if [ $tslint_exit_code -ne 0 ]; then
            echo "TSLint failed for $file:"
            echo "$tslint_result"
            exit 1
        fi
    elif [[ "$file" =~ \.scss$ ]] || [[ "$file" =~ \.css$ ]]; then
        echo "Running stylelint for $file"
        stylelint "$file" --fix

        stylelint_result=$(stylelint "$file")
        stylelint_exit_code=$?
        if [ $stylelint_exit_code -ne 0 ]; then
            echo "stylelint failed for $file:"
            echo "$stylelint_result"
            exit 1
        fi
    fi

    

    # Using cr to get the complexity report (assuming you want it for both .js and .ts files)
    if [[ "$file" =~ \.js$ ]] || [[ "$file" =~ \.ts$ ]]; then
        complexity_result=$(cr -o text "$file")
        complexity_exit_code=$?
        if [ $complexity_exit_code -ne 0 ]; then
            echo "Complexity report failed for $file:"
            echo "$complexity_result"
            exit 1
        fi
    fi
done

echo "saving diff to files..."
DIFF_CONTENT=$(git diff master)

PROMPT="Can you evaluate this code difference for readability, code smells, refactor hints, opportunities to apply specific design patterns and  SOLID principles?\n\n"

# Split the DIFF_CONTENT into chunks of 6000 characters and save to files
count=1
mkdir -p pre_push_diffs

while [ -n "$DIFF_CONTENT" ]; do
    # Grab the first 6000 characters
    CHUNK="${DIFF_CONTENT:0:6000}"

    # Remove the first 6000 characters from DIFF_CONTENT
    DIFF_CONTENT="${DIFF_CONTENT:6000}"

    # Write the chunk to a file with the prompt within the pre_push_diffs folder
    echo -e "$PROMPT$CHUNK" > "pre_push_diffs/pre_push_diff_${count}.txt"

    count=$((count + 1))
done

echo "Diffs have been saved to multiple files (pre_push_diffs/pre_push_diff_X.txt) with the prompt. You can promp AI chatbots to review your code diffs."

exit 0
